[build-system]
requires = ["hatchling>=1.5", "hatch-nodejs-version"]
build-backend = "hatchling.build"

[project]
name = "nbformat"
dynamic = ["version"]
description = "The Jupyter Notebook format"
license = { file = "COPYING.md" }
keywords = ["Interactive", "Interpreter", "Shell", "Web"]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10"
]
requires-python = ">=3.7"
dependencies = [
    "fastjsonschema",
    "jsonschema>=2.6",
    "jupyter_core",
    "traitlets>=5.1",
    "importlib-metadata>=3.6;python_version<\"3.8\"",
]

[[project.authors]]
name = "Jupyter Development Team"
email = "jupyter@googlegroups.com"

[project.readme]
text = "This package contains the base implementation of the Jupyter Notebook format,\nand Python APIs for working with notebooks."
content-type = "text/plain"

[project.urls]
Homepage = "https://jupyter.org"

[project.optional-dependencies]
docs = [
"myst_parser",
"pydata_sphinx_theme",
"sphinx",
"sphinxcontrib_github_alt"
]
test = [
    "check-manifest",
    "testpath",
    "pytest",
    "pre-commit",
    "pep440"
]

[project.scripts]
jupyter-trust = "nbformat.sign:TrustNotebookApp.launch_instance"

[tool.hatch.version]
source = "nodejs"

[tool.hatch.envs.docs]
features = ["docs"]
[tool.hatch.envs.docs.scripts]
build = "make -C docs html SPHINXOPTS='-W'"

[tool.hatch.envs.test]
features = ["test"]
[tool.hatch.envs.test.scripts]
test = "python -m pytest -vv {args}"
nowarn = "python -m pytest -vv -W default {args}"

[tool.hatch.envs.cov]
features = ["test"]
dependencies = ["coverage", "pytest-cov"]
[tool.hatch.envs.cov.env-vars]
ARGS = "-vv --cov nbformat --cov-branch --cov-report term-missing:skip-covered"
[tool.hatch.envs.cov.scripts]
test = "python -m pytest $ARGS --cov-fail-under 75 {args}"

[tool.black]
line_length = 100

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
addopts = "-raXs --durations 10 --color=yes --doctest-modules"
testpaths = [
    "tests/",
]
filterwarnings = [
    "error",
    "ignore:Using or importing the ABCs from 'collections':DeprecationWarning:jsonschema",
    "module:Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning",
]

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
pretty = true
show_error_context = true
show_error_codes = true
strict_equality = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true

[[tool.mypy.overrides]]
module = [
    "fastjsonschema",
    "jsonschema",
    "jupyter_core.*",
    "pysqlite2",
    "traitlets.*",
    "testpath"
]
ignore_missing_imports = true

[tool.flake8]
ignore = "E501, W503, E402"
builtins = "c, get_config"
exclude = [
    ".cache",
    ".github",
    "docs",
    "setup.py",
]
enable-extensions = "G"
extend-ignore = [
    "G001", "G002", "G004", "G200", "G201", "G202",
    # black adds spaces around ':'
    "E203",
]
per-file-ignores = [
    # B011: Do not call assert False since python -O removes these calls
    # F841 local variable 'foo' is assigned to but never used
    # B007 Loop control variable 'foo' not used within the loop body
    "tests/*: B011", "F841", "B007",
    # F401 '.foo' imported but unused
    "nbformat/*/__init__.py: F401",
]
